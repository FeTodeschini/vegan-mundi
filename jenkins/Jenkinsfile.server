pipeline {
    agent any
    stages {
        stage('Old Builds Cleanup') {
            steps {
                script {
                    def currentBuildNumber = env.BUILD_NUMBER as int
                    def buildsToKeep = 5

                    def allBuilds = currentBuild.rawBuild.parent.builds
                    def buildsToDelete = []

                    // Create an array of builds to be deleted
                    allBuilds.each { build ->
                        if (build.number < currentBuildNumber - buildsToKeep + 1) {
                            buildsToDelete << build
                        }
                    }

                    // Delete the old builds
                    buildsToDelete.each { build ->
                        build.delete()
                    }
                }
            }
        }
        stage('Deploy to TEST') {
            steps {
                sshagent (credentials: ['ssh-key-application-server']) {
                    withCredentials([file(credentialsId: 'env-test', variable: 'ENV_TEST_FILE')]) {
                        sh '''
                            # Copy JavaScript files
                            scp -i /root/.ssh/vegan-mundi.pem -o StrictHostKeyChecking=no server/*.js ${EC2_USER}@${HOST_TEST}:${NODE_REMOTE_DIR}/

                            # Deploy the .env.test file that is stored in the Jenkins Credentials plugin
                            cat "$ENV_TEST_FILE" | ssh -i /root/.ssh/vegan-mundi.pem -o StrictHostKeyChecking=no ${EC2_USER}@${HOST_TEST} "cat > ${NODE_REMOTE_DIR}/.env.test"
                            
                            # Restart the server in a login shell
                            ssh -i /root/.ssh/vegan-mundi.pem -o StrictHostKeyChecking=no ${EC2_USER}@${HOST_TEST} '
                                #!/bin/bash
                                export NVM_DIR="/home/ubuntu/.nvm"
                                [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"
                                nvm use default || nvm install node
                                pm2 restart server
                            '
                        '''                    
                    }
                }
            }
        }
        stage('Approve PROD Deployment') {
            steps {
                timeout(time: 1, unit: 'HOURS'){
                    input message: 'Deploy changes to PROD?', ok: 'Deploy' 
                }
            }
        }
    }
}
