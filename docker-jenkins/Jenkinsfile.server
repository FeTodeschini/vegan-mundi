pipeline {
    agent any
    environment {
        NVM_DIR = '/home/ubuntu/.nvm'
        PATH = "${NVM_DIR}/versions/node/v22.9.0/bin:${env.PATH}"
    }

    stages {
        stage('Conditional Execution') {
            when {
                changeset "**/server/**"
            }
            stages {
                stage('Old Builds Cleanup') {
                    steps {
                        script {
                            def currentBuildNumber = env.BUILD_NUMBER as int
                            def buildsToKeep = 2

                            def allBuilds = currentBuild.rawBuild.parent.builds
                            def buildsToDelete = []

                            // Create an array of builds to be deleted
                            allBuilds.each { build ->
                                if (build.number < currentBuildNumber - buildsToKeep + 1) {
                                    buildsToDelete << build
                                }
                            }

                            // Delete the old builds
                            buildsToDelete.each { build ->
                                build.delete()
                            }
                        }
                    }
                }
                stage('Deploy to TEST') {
                    steps {
                        withCredentials([file(credentialsId: 'env-node-test', variable: 'ENV_NODE_TEST')]) {
                            sshagent(['ssh-key-ec2']) {
                                sh '''
                                    # Copy JavaScript files - scp does not support recursive copy
                                    scp -o StrictHostKeyChecking=no -r server/*.js ${EC2_USER}@${EC2_TEST}:${REMOTE_DIR_NODE}/
                                    scp -o StrictHostKeyChecking=no -r server/config/*.js ${EC2_USER}@${EC2_TEST}:${REMOTE_DIR_NODE}/config/
                                    scp -o StrictHostKeyChecking=no -r server/controllers/*.js ${EC2_USER}@${EC2_TEST}:${REMOTE_DIR_NODE}/controllers/
                                    scp -o StrictHostKeyChecking=no -r server/middlewares/*.js ${EC2_USER}@${EC2_TEST}:${REMOTE_DIR_NODE}/middlewares/
                                    scp -o StrictHostKeyChecking=no -r server/routes/*.js ${EC2_USER}@${EC2_TEST}:${REMOTE_DIR_NODE}/routes/
                                    scp -o StrictHostKeyChecking=no -r server/utils/*.js ${EC2_USER}@${EC2_TEST}:${REMOTE_DIR_NODE}/utils/

                                    # Deploy the .env.test file that is stored in the Jenkins Credentials plugin
                                    cat "$ENV_NODE_TEST" | ssh -o StrictHostKeyChecking=no ${EC2_USER}@${EC2_TEST} "cat > ${REMOTE_DIR_NODE}/.env.test"
                                    
                                    # Restart the server
                                    ssh -o StrictHostKeyChecking=no ${EC2_USER}@${EC2_TEST} '
                                        . /home/ubuntu/.nvm/nvm.sh &&
                                        pm2 restart server
                                    '
                                '''
                            }
                        }
                    }
                }

                stage('Install Dependencies') { 
                    steps {
                        script {
                            sh '''
                                cd server
                                npm install --omit=optional --no-audit --force --no-bin-links --loglevel verbose | tee -a /home/ubuntu/docker-jenkins/npm_install.log
                            '''
                        }
                    }
                }

                stage('Unit Test') { 
                    steps {
                        script {
                            // Start the Express Test server in the background
                            def server = sh(script: '''
                                # Load NVM
                                export NVM_DIR="$HOME/.nvm"
                                [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"

                                # Start the server in the background
                                nohup node server/test.server.js > server.log 2>&1 & echo $!
                            ''', returnStdout: true).trim()

                            echo "Server PID: ${server}"

                            def r = sh(script: 'curl -I http://0.0.0.0:5000/test-server || echo "Error"', returnStdout: true).trim()
                            echo "Curl response: ${r}"

                            // Check the last few lines of the server log
                            sh 'tail -n 15 server.log'

                            // Wait for the server to be ready
                            def maxRetries = 10
                            def retries = 0
                            def isServerReady = false

                            while (retries < maxRetries && !isServerReady) {
                                sleep(10)
                                def result = sh(script: 'curl -s -o /dev/null -w "%{http_code}" http://localhost:5000/test-server', returnStdout: true).trim()
                                if (result == '200') {
                                    isServerReady = true
                                    echo 'Server is ready.'
                                } else {
                                    retries++
                                    echo "Attempt ${retries}: Server not ready yet."
                                }
                            }

                            if (!isServerReady) {
                                error "Server did not start in time."
                            }
                        }
                    }
                }

                stage('Approve PROD Deployment') {
                    steps {
                        timeout(time: 1, unit: 'HOURS') {
                            input message: 'Deploy changes to PROD?', ok: 'Deploy' 
                        }
                    }
                }

                stage('Deploy to PROD') {
                    steps {
                        withCredentials([file(credentialsId: 'env-node-production', variable: 'ENV_FILE_PROD')]) {
                            sshagent(['ssh-key-ec2']) {
                                sh '''
                                    # Copy JavaScript files
                                    scp -o StrictHostKeyChecking=no -r server/*.js ${EC2_USER}@${EC2_PROD}:${REMOTE_DIR_NODE}
                                    scp -o StrictHostKeyChecking=no -r server/config/*.js ${EC2_USER}@${EC2_PROD:${REMOTE_DIR_NODE}/config
                                    scp -o StrictHostKeyChecking=no -r server/controllers/*.js ${EC2_USER}@${EC2_PROD}:${REMOTE_DIR_NODE}/controllers
                                    scp -o StrictHostKeyChecking=no -r server/middlewares/*.js ${EC2_USER}@${EC2_PROD}:${REMOTE_DIR_NODE}/middlewares
                                    scp -o StrictHostKeyChecking=no -r server/routes/*.js ${EC2_USER}@${EC2_PROD}:${REMOTE_DIR_NODE}/routes
                                    scp -o StrictHostKeyChecking=no -r server/utils/*.js ${EC2_USER}@${EC2_PROD}:${REMOTE_DIR_NODE}/utils

                                    # Deploy the .env.production file that is stored in the Jenkins Credentials plugin
                                    cat "$ENV_FILE_PROD" | ssh -o StrictHostKeyChecking=no ${EC2_USER}@${EC2_PROD} "cat > ${REMOTE_DIR_NODE}/.env.production"
                                    
                                    # Restart the server
                                    ssh -o StrictHostKeyChecking=no ${EC2_USER}@${EC2_PROD} '
                                        . /home/ubuntu/.nvm/nvm.sh &&
                                        pm2 restart server
                                    '
                                '''
                            }
                        }
                    }
                }

            }    
        }
    }
}